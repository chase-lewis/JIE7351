CREATE STREAM test_stream (person_uid bigint, add_reason_cd varchar, add_user_id bigint, last_chg_time bigint) WITH (kafka_topic='sql-jdbc-tables-Person', value_format='JSON');

### TO EXTRACT ###
CREATE STREAM ls (schema varchar, payload varchar) WITH (kafka_topic='sql-jdbc-tables-Person', value_format='JSON');

CREATE STREAM a AS SELECT EXTRACTJSONFIELD(payload, '$.person_uid'), EXTRACTJSONFIELD(payload, '$.add_reason_cd') FROM ls;

###################

CREATE STREAM test_stream2 AS SELECT EXTRACTJSONFIELD (schema, '$.name') AS schema_name FROM test_stream;

CREATE TABLE test_table (person_uid bigint, add_reason_cd varchar, add_user_i bigint, last_chg_time bigint) WITH (kafka_topic='sql-jdbc-tables-Person', value_format='JSON', key='person_uid');

CREATE STREAM entity (entity_uid bigint, class_cd varchar) WITH (kafka_topic='sql-jdbc-tables-Entity', value_format='JSON');

CREATE TABLE test_table (entity_uid bigint, class_cd varchar) WITH (kafka_topic='sql-jdbc-tables-Entity', value_format='JSON', key='entity_uid');

#############################################################################################
CREATE TABLE S_INITPATIENT AS SELECT
    PERSON.PERSON_UID AS PATIENT_UID ‘PATIENT_UID’,
    PERSON.LOCAL_ID AS PATIENT_LOCAL_ID ‘PATIENT_LOCAL_ID’,
    PERSON.AGE_REPORTED,
    PERSON.AGE_REPORTED_UNIT_CD,
    PERSON.BIRTH_GENDER_CD,
    PERSON.BIRTH_TIME AS PATIENT_DOB ‘PATIENT_DOB’,
    PERSON.CURR_SEX_CD,
    PERSON.DECEASED_IND_CD,
    PERSON.ADD_USER_ID,
    PERSON.LAST_CHG_USER_ID,
    SPEAKS_ENGLISH_CD,
    ADDITIONAL_GENDER_CD AS PATIENT_ADDL_GENDER_INFO ‘PATIENT_ADDL_GENDER_INFO’,
    ETHNIC_UNK_REASON_CD,
    SEX_UNK_REASON_CD,
    PREFERRED_GENDER_CD,
    PERSON.DECEASED_TIME AS PATIENT_DECEASED_DATE ‘PATIENT_DECEASED_DATE’,
    TRANSLATE(PERSON.DESCRIPTION,' ' ,’0D0A’x)    ‘PATIENT_GENERAL_COMMENTS’ as PATIENT_GENERAL_COMMENTS,
    PERSON.ELECTRONIC_IND AS PATIENT_ENTRY_METHOD ‘PATIENT_ENTRY_METHOD’,
    PERSON.ETHNIC_GROUP_IND,
    PERSON.MARITAL_STATUS_CD,
    PERSON.PERSON_PARENT_UID AS PATIENT_MPR_UID ‘PATIENT_MPR_UID’,
    PERSON.LAST_CHG_TIME AS PATIENT_LAST_CHANGE_TIME ‘PATIENT_LAST_CHANGE_TIME’,
    PERSON.ADD_TIME AS PATIENT_ADD_TIME ‘PATIENT_ADD_TIME’,
    PERSON.RECORD_STATUS_CD AS PATIENT_RECORD_STATUS ‘PATIENT_RECORD_STATUS’,
    PERSON.OCCUPATION_CD,
    PERSON.PRIM_LANG_CD,
    PARTICIPATION.ACT_UID AS  PATIENT_EVENT_UID ‘PATIENT_EVENT_UID’,
    PARTICIPATION.TYPE_CD AS PATIENT_EVENT_TYPE ‘PATIENT_EVENT_TYPE’
    FROM
NBS_ODS.PERSON,NBS_ODS.PARTICIPATION
    WHERE PERSON.PERSON_UID=PARTICIPATION.SUBJECT_ENTITY_UID
#############################################################################################
CREATE STREAM person_raw (schema varchar, payload varchar) WITH (kafka_topic='sql-jdbc-tables-Person', value_format='JSON');

CREATE STREAM participation_raw (schema varchar, payload varchar) WITH (kafka_topic='sql-jdbc-tables-Participation', value_format='JSON');

CREATE STREAM person AS SELECT EXTRACTJSONFIELD(payload, '$.person_uid') AS person_uid, EXTRACTJSONFIELD(payload, '$.act_uid') AS patient_local_uid FROM person_raw;

CREATE STREAM participation AS SELECT EXTRACTJSONFIELD(payload, '$.subject_entity_uid') AS subject_entity_uid, EXTRACTJSONFIELD(payload, '$.type_cd') AS patient_event_type FROM participation_raw;